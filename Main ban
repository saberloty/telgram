import logging
import asyncio
import json
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.types import (
    Message, KeyboardButton, ReplyKeyboardMarkup,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from keep_alive import keep_alive

API_TOKEN = '8177436123:AAG2RuDLbRI6HdgsCTa7_75TJwuQ151ohLA'
ADMIN_ID = 131555118
CHANNEL_ID = -1002798154695
USERS_FILE = "users.json"
BANNED_FILE = "banned_users.json"

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

class RegisterState(StatesGroup):
    waiting_for_name = State()
    waiting_for_instagram = State()
    waiting_for_phone = State()

def load_users():
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_users(data):
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def load_banned():
    if os.path.exists(BANNED_FILE):
        with open(BANNED_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return []

def save_banned(data):
    with open(BANNED_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

users = load_users()
banned_users = load_banned()

def user_keyboard(is_admin=False):
    buttons = []
    if is_admin:
        buttons.append([KeyboardButton(text="👥 کاربران")])
    else:
        buttons = [
            [KeyboardButton(text="📁 ارسالی‌های شما")],
            [KeyboardButton(text="👤 پروفایل من")]
        ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

@dp.message(F.text == "/start")
async def cmd_start(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)

    if message.from_user.id == ADMIN_ID:
        await message.answer("👑 ادمین عزیز، به پنل مدیریت ربات خوش آمدید.", reply_markup=user_keyboard(is_admin=True))
        return

    if user_id in banned_users:
        await message.answer("⛔️ شما از استفاده از این ربات محروم شده‌اید.")
        return

    if user_id in users and users[user_id].get("completed"):
        await message.answer("✅ شما قبلاً ثبت‌نام کرده‌اید. اکنون می‌توانید فایل ارسال کنید.",
                             reply_markup=user_keyboard())
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="✅ شروع عضویت", callback_data="start_register")]
    ])
    await message.answer(
        f"سلام {message.from_user.first_name} عزیز 👋\nبرای استفاده از ربات ابتدا باید ثبت‌نام کنید.",
        reply_markup=kb
    )

@dp.callback_query(F.data == "start_register")
async def begin_register(callback: types.CallbackQuery, state: FSMContext):
    user_id = str(callback.from_user.id)
    if user_id in users and users[user_id].get("completed"):
        await callback.message.answer("✅ شما قبلاً ثبت‌نام کرده‌اید.", reply_markup=user_keyboard())
        return

    users[user_id] = {"step": "ask_name"}
    save_users(users)
    await callback.message.answer("📝 لطفاً نام خود را وارد کنید:")
    await state.set_state(RegisterState.waiting_for_name)

@dp.message(RegisterState.waiting_for_name)
async def get_name(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)
    users[user_id]["name"] = message.text
    users[user_id]["step"] = "ask_instagram"
    save_users(users)
    await message.answer("📸 لطفاً آیدی اینستاگرام خود را وارد کنید:")
    await state.set_state(RegisterState.waiting_for_instagram)

@dp.message(RegisterState.waiting_for_instagram)
async def get_instagram(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)
    users[user_id]["instagram"] = message.text
    users[user_id]["step"] = "ask_phone"
    save_users(users)
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="📱 ارسال شماره من", request_contact=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("📞 لطفاً فقط از دکمه زیر شماره خود را ارسال کنید:", reply_markup=kb)
    await state.set_state(RegisterState.waiting_for_phone)

@dp.message(RegisterState.waiting_for_phone, F.contact)
async def get_phone(message: Message, state: FSMContext):
    if message.contact.user_id != message.from_user.id:
        await message.answer("⚠️ لطفاً فقط شماره خودتان را ارسال کنید.")
        return

    user_id = str(message.from_user.id)
    users[user_id].update({
        "phone": message.contact.phone_number,
        "username": message.from_user.username or "ندارد",
        "completed": True,
        "uploads": [],
        "is_vip": False
    })
    users[user_id].pop("step", None)
    save_users(users)

    await message.answer("✅ ثبت‌نام شما با موفقیت انجام شد!", reply_markup=user_keyboard())
    await bot.send_message(ADMIN_ID, f"""
📝 <b>ثبت‌نام جدید:</b>
👤 نام: {users[user_id]['name']}
📸 اینستاگرام: {users[user_id]['instagram']}
📞 شماره: {users[user_id]['phone']}
🔗 یوزرنیم: @{users[user_id]["username"]}
🆔 <a href="tg://user?id={user_id}">{user_id}</a>
""")
    await state.clear()

@dp.message(F.photo | F.video)
async def handle_media(message: Message):
    user_id = str(message.from_user.id)

    if user_id in banned_users:
        await message.answer("⛔️ شما بن شده‌اید و نمی‌توانید فایل ارسال کنید.")
        return

    if user_id not in users or not users[user_id].get("completed"):
        await message.answer("ابتدا ثبت‌نام را کامل کنید.")
        return

    file_type = "photo" if message.photo else "video"
    file_id = message.photo[-1].file_id if message.photo else message.video.file_id
    caption = message.caption or ""

    # ارسال برای ادمین
    admin_caption = f"{caption}\n\n🚩مشخصات ارسال کننده:\n🆔 <a href='tg://user?id={user_id}'>{user_id}</a>\n🔗 آیدی: @{message.from_user.username or 'ندارد'}"
    await (bot.send_photo(ADMIN_ID, file_id, caption=admin_caption) if file_type == "photo"
           else bot.send_video(ADMIN_ID, file_id, caption=admin_caption))

    # ارسال برای کانال با امضا
    full_caption = f"""{caption}

➖➖➖➖➖➖➖➖
✍ از طریق ثبت نام در ربات زیر شما هم می‌توانید برای همین کانال مطلب بفرستید.👇
@GolddancerBot

🌐 | دسترسی به ۲۵ کانال رقص:👇
https://t.me/addlist/0gZ1uuwjNKM1OWRk
➖➖➖➖➖➖➖➖

🚩مشخصات ارسال کننده این مطلب:
🆔 <a href='tg://user?id={user_id}'>{user_id}</a>
🔗 آیدی: @{message.from_user.username or 'ندارد'}"""

    await (bot.send_photo(CHANNEL_ID, file_id, caption=full_caption) if file_type == "photo"
           else bot.send_video(CHANNEL_ID, file_id, caption=full_caption))

    users[user_id].setdefault("uploads", []).append({"type": file_type, "file_id": file_id})
    if not users[user_id].get("is_vip") and len(users[user_id]["uploads"]) >= 5:
        users[user_id]["is_vip"] = True
        await message.answer("🎉 تبریک! شما به عضویت VIP ارتقا یافتید!")

    save_users(users)
    await message.answer("✅ فایل شما دریافت شد.")

@dp.message(F.text == "👤 پروفایل من")
async def show_profile(message: Message):
    user_id = str(message.from_user.id)
    if user_id in banned_users:
        await message.answer("⛔️ شما بن شده‌اید و به این بخش دسترسی ندارید.")
        return

    data = users.get(user_id)
    if not data:
        await message.answer("شما هنوز ثبت‌نام نکرده‌اید.")
        return

    vip_status = "🎖 عضو VIP" if data.get("is_vip") else "کاربر عادی"
    await message.answer(f"""
👤 نام: {data['name']}
📸 اینستاگرام: {data['instagram']}
📞 شماره: {data['phone']}
🔗 یوزرنیم: @{data['username']}
🆔 <a href="tg://user?id={user_id}">{user_id}</a>
📂 فایل‌های ارسالی: {len(data.get('uploads', []))}
🏅 وضعیت: {vip_status}
""")

@dp.message(F.text == "📁 ارسالی‌های شما")
async def show_user_uploads(message: Message):
    user_id = str(message.from_user.id)
    if user_id in banned_users:
        await message.answer("⛔️ شما بن شده‌اید و به این بخش دسترسی ندارید.")
        return

    uploads = users.get(user_id, {}).get("uploads", [])
    if not uploads:
        await message.answer("هنوز فایلی ارسال نکرده‌اید.")
        return

    for item in uploads:
        if item["type"] == "photo":
            await message.answer_photo(photo=item["file_id"])
        else:
            await message.answer_video(video=item["file_id"])

@dp.message(F.text == "👥 کاربران")
async def list_users(message: Message):
    if message.from_user.id != ADMIN_ID:
        return

    for uid, data in users.items():
        if data.get("completed"):
            vip_mark = "⭐️" if data.get("is_vip") else ""
            is_banned = uid in banned_users
            info = f"""
{vip_mark} 👤 نام: {data['name']}
📸 اینستاگرام: {data['instagram']}
📞 شماره: {data['phone']}
🔗 آیدی: @{data['username']}
🆔 آیدی عددی: <a href='tg://user?id={uid}'>{uid}</a>
⛔️ وضعیت: {"بن شده" if is_banned else "فعال"}
"""
            buttons = [
                InlineKeyboardButton(text="🗑 حذف", callback_data=f"delete_{uid}"),
                InlineKeyboardButton(text="📁 ارسالی‌ها", callback_data=f"view_{uid}")
            ]
            if is_banned:
                buttons.append(InlineKeyboardButton(text="✅ رفع بن", callback_data=f"unban_{uid}"))
            else:
                buttons.append(InlineKeyboardButton(text="⛔️ بن", callback_data=f"ban_{uid}"))

            keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])
            await message.answer(info, reply_markup=keyboard)

@dp.callback_query(F.data.startswith("delete_"))
async def handle_delete_user(callback: types.CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        return
    user_id = callback.data.replace("delete_", "")
    if user_id in users:
        users.pop(user_id)
        save_users(users)
        await callback.message.edit_text("❌ کاربر حذف شد.")
        await callback.answer("حذف شد.")

@dp.callback_query(F.data.startswith("view_"))
async def handle_view_uploads(callback: types.CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        return
    user_id = callback.data.replace("view_", "")
    uploads = users.get(user_id, {}).get("uploads", [])
    if not uploads:
        await callback.message.answer("کاربر فایلی ارسال نکرده است.")
        return
    for item in uploads:
        if item["type"] == "photo":
            await bot.send_photo(chat_id=ADMIN_ID, photo=item["file_id"])
        else:
            await bot.send_video(chat_id=ADMIN_ID, video=item["file_id"])
    await callback.answer()

@dp.callback_query(F.data.startswith("ban_"))
async def handle_ban(callback: types.CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        return
    user_id = callback.data.replace("ban_", "")
    if user_id not in banned_users:
        banned_users.append(user_id)
        save_banned(banned_users)
        await bot.send_message(user_id, "❌ کاربرگرامی به دلیل رعایت نکردن قوانین از ربات بن شده‌اید.")
        await callback.message.edit_text("⛔️ کاربر بن شد.")
        await callback.answer("کاربر بن شد")

@dp.callback_query(F.data.startswith("unban_"))
async def handle_unban(callback: types.CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        return
    user_id = callback.data.replace("unban_", "")
    if user_id in banned_users:
        banned_users.remove(user_id)
        save_banned(banned_users)
        await bot.send_message(user_id, "✅ شما از حالت بن خارج شدید و می‌توانید از ربات استفاده کنید.")
        await callback.message.edit_text("✅ کاربر از بن خارج شد.")
        await callback.answer("رفع بن شد")

async def main():
    await bot.send_message(ADMIN_ID, "✅ ربات با موفقیت راه‌اندازی شد و آماده دریافت پیام‌هاست.")
    await dp.start_polling(bot)

if __name__ == "__main__":
    keep_alive()
    asyncio.run(main())
